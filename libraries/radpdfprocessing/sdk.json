[
  {
    "Name": "Modify Form Values",
    "ExampleInfo": {
      "Name": "Modify Form Values",
      "DirectoryName": "AddWatermark",
      "ExampleFileNames": [ "AddWatermark.csproj", "BlueTemplate.pdf", "Program.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/AddWatermark/",
    "Description": "This project demonstrates how you can add a watermark to a pdf file.",
    "KeyWords": "Modify Form Values,  pdf, watermark"
  },
  {
    "Name": "Modify Form Values",
    "ExampleInfo": {
      "Name": "Modify Form Values",
      "DirectoryName": "AddWatermark(.NET Standard)",
      "ExampleFileNames": [ "AddWatermark_NetStandard.csproj", "AddWatermark.csproj", "BlueTemplate.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/AddWatermark/",
    "Description": "This project demonstrates how you can add a watermark to a pdf file.",
    "KeyWords": "Modify Form Values,  pdf, watermark"
  },
  {
    "Name": "Create Document With Images",
    "ExampleInfo": {
      "Name": "Create Document With Images",
      "DirectoryName": "CreateDocumentWithImages",
      "ExampleFileNames": [ "CreateDocumentWithImages.csproj", "DocumentGenerator.cs", "Program.cs", "Resources\\GRAYSCALE.jp2", "Resources\\rgb.jp2" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreateDocumentWithImages/",
    "Description": "This example demonstrates how to create RadFixedDocument containing images and export it with different ImageQuality. In GenerateDocumentContent() method you can see different ways of inserting images allowing you to control the exported image quality and size:\r\n - The first approach inserts the images by simply passing the image file stream in ImageSource constructor. This way the images will be exported with different image quality depending on PdfFormatProvider.ExportSettings. When the ImageQuality is set to High then PdfProcessing automatically detects if the image is JPEG or JPEG2000 and the image is inserted in the PDF file as it is which guarantees fast export with maximum image quality.\r\n - The second approach inserts the images by passing image file stream and ImageQuality enumeration value in the ImageSource's constructor. This way the images will be always exported with the specified image quality ignoring PdfFormatProvider.ExportSettings.\r\n - The third approach inserts black and white image using EncodedImageData class. This allows you to achieve maximum lossless compression by exporting the image data with BitsPerComponent equal to 1 and FlateDecode filter. As the encoded image data is exported as it is, the PdfFormatProvider.ExportSettings.ImageQuality value is ignored in this case as well.",
    "KeyWords": "Create Document With Images,  create,scratch,prepare,data,imagesource,image,quality,insert,save,export"
  },
  {
    "Name": "Create Document With Images",
    "ExampleInfo": {
      "Name": "Create Document With Images",
      "DirectoryName": "CreateDocumentWithImages(.NET Standard)",
      "ExampleFileNames": [ "CreateDocumentWithImages_NetStandard.csproj", "CreateDocumentWithImages.csproj", "CreateDocumentWithImages_NetStandard.csproj", "Resources\\GRAYSCALE.jp2", "Resources\\rgb.jp2" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreateDocumentWithImages/",
    "Description": "This example demonstrates how to create RadFixedDocument containing images and export it with different ImageQuality. In GenerateDocumentContent() method you can see different ways of inserting images allowing you to control the exported image quality and size:\r\n - The first approach inserts the images by simply passing the image file stream in ImageSource constructor. This way the images will be exported with different image quality depending on PdfFormatProvider.ExportSettings. When the ImageQuality is set to High then PdfProcessing automatically detects if the image is JPEG or JPEG2000 and the image is inserted in the PDF file as it is which guarantees fast export with maximum image quality.\r\n - The second approach inserts the images by passing image file stream and ImageQuality enumeration value in the ImageSource's constructor. This way the images will be always exported with the specified image quality ignoring PdfFormatProvider.ExportSettings.\r\n - The third approach inserts black and white image using EncodedImageData class. This allows you to achieve maximum lossless compression by exporting the image data with BitsPerComponent equal to 1 and FlateDecode filter. As the encoded image data is exported as it is, the PdfFormatProvider.ExportSettings.ImageQuality value is ignored in this case as well.",
    "KeyWords": "Create Document With Images,  create,scratch,prepare,data,imagesource,image,quality,insert,save,export"
  },
  {
    "Name": "Create Interactive forms",
    "ExampleInfo": {
      "Name": "Create Interactive forms",
      "DirectoryName": "CreateInteractiveForms",
      "ExampleFileNames": [ "CreateInteractiveForms.csproj", "Program.cs", "ReadMe.md" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreateInteractiveForms/",
    "Description": "The code in this example demonstrates how you can use RadPdfProcessing to insert interactive forms into a PDF document.",
    "KeyWords": "Create Interactive forms,  field, textbox, checkbox, listbox, combtextbox, button, signature, radio button"
  },
  {
    "Name": "Create Interactive forms",
    "ExampleInfo": {
      "Name": "Create Interactive forms",
      "DirectoryName": "CreateInteractiveForms(.NET Standard)",
      "ExampleFileNames": [ "CreateInteractiveForms_NetStandard.csproj", "CreateInteractiveForms.csproj", "CreateInteractiveForms.csproj.vspscc", "CreateInteractiveForms_NetStandard.csproj" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreateInteractiveForms/",
    "Description": "The code in this example demonstrates how you can use RadPdfProcessing to insert interactive forms into a PDF document.",
    "KeyWords": "Create Interactive forms,  field, textbox, checkbox, listbox, combtextbox, button, signature, radio button"
  },
  {
    "Name": "Create PDF document using RadFixedDocumentEditor",
    "ExampleInfo": {
      "Name": "Create PDF document using RadFixedDocumentEditor",
      "DirectoryName": "CreatePdfUsingRadFixedDocumentEditor",
      "ExampleFileNames": [ "CreatePdfUsingRadFixedDocumentEditor.csproj", "App.config", "ContentGenerator.cs", "Product.cs", "Program.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreatePdfUsingRadFixedDocumentEditor/",
    "Description": "##  Create PDF document using RadFixedDocumentEditor \r\n\r\nThis demo shows how to generate a PDF file with [RadFixedDocumentEditor](https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/editing/radfixeddocumenteditor) in a flow-like manner. The example exports two similar PDF documents - one using only Standard PDF fonts and other using fonts from the machine, which are embedded in the PDF file. More information about the different types of fonts is available at [https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/concepts/fonts](https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/concepts/fonts).",
    "KeyWords": "Create PDF document using RadFixedDocumentEditor"
  },
  {
    "Name": "Create PDF document using RadFixedDocumentEditor",
    "ExampleInfo": {
      "Name": "Create PDF document using RadFixedDocumentEditor",
      "DirectoryName": "CreatePdfUsingRadFixedDocumentEditor(.NET Standard)",
      "ExampleFileNames": [ "CreatePdfUsingRadFixedDocumentEditor_NetStandard.csproj", "App.config", "CreatePdfUsingRadFixedDocumentEditor.csproj", "CreatePdfUsingRadFixedDocumentEditor_NetStandard.csproj" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CreatePdfUsingRadFixedDocumentEditor/",
    "Description": "##  Create PDF document using RadFixedDocumentEditor \r\n\r\nThis demo shows how to generate a PDF file with [RadFixedDocumentEditor](https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/editing/radfixeddocumenteditor) in a flow-like manner. The example exports two similar PDF documents - one using only Standard PDF fonts and other using fonts from the machine, which are embedded in the PDF file. More information about the different types of fonts is available at [https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/concepts/fonts](https://docs.telerik.com/devtools/document-processing/libraries/radpdfprocessing/concepts/fonts).",
    "KeyWords": "Create PDF document using RadFixedDocumentEditor"
  },
  {
    "Name": "Custom Jpeg Image Converter",
    "ExampleInfo": {
      "Name": "Custom Jpeg Image Converter",
      "DirectoryName": "CustomJpegImageConverter(.NET Standard)",
      "ExampleFileNames": [ "CustomJpegImageConverter_NetStandard.csproj", "CustomJpegImageConverter_NetStandard.csproj" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/CustomJpegImageConverter/",
    "Description": "This project demonstrates how to create a custom implementation of the JpegImageConverterBase abstract class and set it to the JpegImageConverter property of the FixedExtensibilityManager, in order to export to PDF format a document containing images different than Jpeg and Jpeg2000 or ImageQuality different than High.",
    "KeyWords": "Custom Jpeg Image Converter,  image, export, ImageQuality, JpegImageConverterBase, JpegImageConverter"
  },
  {
    "Name": "Draw Header and Footer",
    "ExampleInfo": {
      "Name": "Draw Header and Footer",
      "DirectoryName": "DrawHeaderFooter",
      "ExampleFileNames": [ "DrawHeaderFooter.csproj", "App.config", "Program.cs", "ReadMe.md", "InputFiles\\SampleDocument.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/DrawHeaderFooter/",
    "Description": "This project demonstrates how to import a PDF document to draw header and footer using the FixedContentEditor and save the modified PDF document.",
    "KeyWords": "Draw Header and Footer,  import,export,pages,numbers,image"
  },
  {
    "Name": "Draw Header and Footer",
    "ExampleInfo": {
      "Name": "Draw Header and Footer",
      "DirectoryName": "DrawHeaderFooter(.NET Standard)",
      "ExampleFileNames": [ "DrawHeaderFooter_NetStandard.csproj", "App.config", "DrawHeaderFooter.csproj", "DrawHeaderFooter_NetStandard.csproj", "InputFiles\\SampleDocument.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/DrawHeaderFooter/",
    "Description": "This project demonstrates how to import a PDF document to draw header and footer using the FixedContentEditor and save the modified PDF document.",
    "KeyWords": "Draw Header and Footer,  import,export,pages,numbers,image"
  },
  {
    "Name": "Export UI Element",
    "ExampleInfo": {
      "Name": "Export UI Element",
      "DirectoryName": "ExportUIElement(Silverlight)",
      "ExampleFileNames": [ "ExportUIElement_SL.csproj", "App_SL.xaml", "App_SL.xaml.cs", "Example.xaml", "Example.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "Models\\PlotInfo.cs", "PdfExport\\ExportHelper.cs", "PdfExport\\PdfRenderer.cs", "PdfExport\\ConcreteRenderers\\BorderRenderer.cs", "PdfExport\\ConcreteRenderers\\EllipseRenderer.cs", "PdfExport\\ConcreteRenderers\\FrameworkElementRenderer.cs", "PdfExport\\ConcreteRenderers\\ImageRenderer.cs", "PdfExport\\ConcreteRenderers\\LineRenderer.cs", "PdfExport\\ConcreteRenderers\\PanelRenderer.cs", "PdfExport\\ConcreteRenderers\\PathRenderer.cs", "PdfExport\\ConcreteRenderers\\RectangleRenderer.cs", "PdfExport\\ConcreteRenderers\\TextBlockRenderer.cs", "PdfExport\\ConcreteRenderers\\TextBoxRenderer.cs", "PdfExport\\ConcreteRenderers\\TextRenderer.cs", "PdfExport\\ConcreteRenderers\\UIElementRendererBase.cs", "PdfExport\\Miscellaneous\\CompositeDisposableObject.cs", "PdfExport\\Miscellaneous\\DisposableOpacity.cs", "PdfExport\\Miscellaneous\\MathHelper.cs", "PdfExport\\Miscellaneous\\PdfColorHelper.cs", "PdfExport\\Miscellaneous\\PdfGeometryHelper.cs", "PdfExport\\Miscellaneous\\PdfRenderContext.cs", "ViewModels\\MainViewModel.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ExportUIElement/",
    "Description": "This sample demonstrates how RadPdfProcessing can be used to convert WPF (Silverlight) UI elements to PDF format.",
    "KeyWords": "Export UI Element,  xaml,pdf"
  },
  {
    "Name": "Export UI Element",
    "ExampleInfo": {
      "Name": "Export UI Element",
      "DirectoryName": "ExportUIElement",
      "ExampleFileNames": [ "ExportUIElement_WPF.csproj", "App.xaml", "App.xaml.cs", "Example.xaml", "Example.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "Models\\PlotInfo.cs", "PdfExport\\ExportHelper.cs", "PdfExport\\PdfRenderer.cs", "PdfExport\\ConcreteRenderers\\BorderRenderer.cs", "PdfExport\\ConcreteRenderers\\EllipseRenderer.cs", "PdfExport\\ConcreteRenderers\\FrameworkElementRenderer.cs", "PdfExport\\ConcreteRenderers\\ImageRenderer.cs", "PdfExport\\ConcreteRenderers\\LineRenderer.cs", "PdfExport\\ConcreteRenderers\\PanelRenderer.cs", "PdfExport\\ConcreteRenderers\\RectangleRenderer.cs", "PdfExport\\ConcreteRenderers\\ShapeRenderer.cs", "PdfExport\\ConcreteRenderers\\TextBlockRenderer.cs", "PdfExport\\ConcreteRenderers\\TextBoxRenderer.cs", "PdfExport\\ConcreteRenderers\\TextRenderer.cs", "PdfExport\\ConcreteRenderers\\UIElementRendererBase.cs", "PdfExport\\Miscellaneous\\CompositeDisposableObject.cs", "PdfExport\\Miscellaneous\\DisposableOpacity.cs", "PdfExport\\Miscellaneous\\MathHelper.cs", "PdfExport\\Miscellaneous\\PdfColorHelper.cs", "PdfExport\\Miscellaneous\\PdfGeometryHelper.cs", "PdfExport\\Miscellaneous\\PdfRenderContext.cs", "ViewModels\\MainViewModel.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ExportUIElement/",
    "Description": "This sample demonstrates how RadPdfProcessing can be used to convert WPF (Silverlight) UI elements to PDF format.",
    "KeyWords": "Export UI Element,  xaml,pdf"
  },
  {
    "Name": "Generate Document",
    "ExampleInfo": {
      "Name": "Generate Document",
      "DirectoryName": "GenerateDocument",
      "ExampleFileNames": [ "GenerateDocument.csproj", "DocumentGenerator.cs", "Program.cs", "ReadMe.md", "SampleData\\documentWpf.PNG" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/GenerateDocument/",
    "Description": "This project demonstrates how to use RadPdfProcessing to create a PDF document.",
    "KeyWords": "Generate Document,  create,scratch,prepare,data"
  },
  {
    "Name": "Generate Document",
    "ExampleInfo": {
      "Name": "Generate Document",
      "DirectoryName": "GenerateDocument(.NET Standard)",
      "ExampleFileNames": [ "GenerateDocument_NetStandard.csproj", "App_SL.xaml", "App_SL.xaml.cs", "DelegateCommand.cs", "ExampleViewModel_SL.cs", "FileHelper.cs", "GenerateDocument.csproj", "GenerateDocument_NetStandard.csproj", "MainPage.xaml", "MainPage.xaml.cs", "SampleData\\barChart.PNG", "SampleData\\documentSilverlight.PNG", "SampleData\\documentWpf.PNG" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/GenerateDocument/",
    "Description": "This project demonstrates how to use RadPdfProcessing to create a PDF document.",
    "KeyWords": "Generate Document,  create,scratch,prepare,data"
  },
  {
    "Name": "Generate Document",
    "ExampleInfo": {
      "Name": "Generate Document",
      "DirectoryName": "GenerateDocument(Silverlight)",
      "ExampleFileNames": [ "GenerateDocument_SL.csproj", "App_SL.xaml", "App_SL.xaml.cs", "DelegateCommand.cs", "ExampleViewModel_SL.cs", "FileHelper.cs", "MainPage.xaml", "MainPage.xaml.cs", "ReadMe.md", "SampleData\\documentSilverlight.PNG" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/GenerateDocument/",
    "Description": "This project demonstrates how to use RadPdfProcessing to create a PDF document.",
    "KeyWords": "Generate Document,  create,scratch,prepare,data"
  },
  {
    "Name": "Manipulate Pages",
    "ExampleInfo": {
      "Name": "Manipulate Pages",
      "DirectoryName": "ManipulatePages",
      "ExampleFileNames": [ "ManipulatePages.csproj", "Program.cs", "ReadMe.md", "InputFiles\\BarChart.pdf", "InputFiles\\CentaurFeatures2014Q3.pdf", "InputFiles\\MultipageDocument.pdf", "InputFiles\\Sound Video and 3D.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ManipulatePages/",
    "Description": "This project demonstrates how to use PdfStreamWriter class in order to manipulate PDF pages. The project shows several use-case scenario examples in 4 separate methods as follows:\n - MergeDifferentDocumentsPages - this method merges all pages from several PDF documents with different PDF page content. All page content is preserved unmodified after the merge operation, even when the original file contains currently not supported by RadPdfProcessing model PDF features (such us sound, video and 3D interactive content).\n - SplitDocumentPages - this method splits the pages of a multi-paged PDF file and saves them as separate single-paged PDF files.\n - FitAndPositionMultiplePagesOnSinglePage - this method gets a multi-paged PDF file and creates a new PDF file from its pages by scaling and positioning each 4 consecutive pages from the original file to a single page in the result file.\n - PrependAndAppendPageContent - this method gets a multi-paged PDF file and creates new PDF file from its pages by adding newly generated page content below and above the existing page content.\n\nIn the end, the demo opens the result folder with the newly created PDF files.",
    "KeyWords": "Manipulate Pages,  merge,split,prepend,append,add,page,content,generate,PDF,stream,processing"
  },
  {
    "Name": "Manipulate Pages",
    "ExampleInfo": {
      "Name": "Manipulate Pages",
      "DirectoryName": "ManipulatePages(.NET Standard)",
      "ExampleFileNames": [ "ManipulatePages_NetStandard.csproj", "ManipulatePages.csproj", "ManipulatePages_NetStandard.csproj", "InputFiles\\BarChart.pdf", "InputFiles\\CentaurFeatures2014Q3.pdf", "InputFiles\\MultipageDocument.pdf", "InputFiles\\Sound Video and 3D.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ManipulatePages/",
    "Description": "This project demonstrates how to use PdfStreamWriter class in order to manipulate PDF pages. The project shows several use-case scenario examples in 4 separate methods as follows:\n - MergeDifferentDocumentsPages - this method merges all pages from several PDF documents with different PDF page content. All page content is preserved unmodified after the merge operation, even when the original file contains currently not supported by RadPdfProcessing model PDF features (such us sound, video and 3D interactive content).\n - SplitDocumentPages - this method splits the pages of a multi-paged PDF file and saves them as separate single-paged PDF files.\n - FitAndPositionMultiplePagesOnSinglePage - this method gets a multi-paged PDF file and creates a new PDF file from its pages by scaling and positioning each 4 consecutive pages from the original file to a single page in the result file.\n - PrependAndAppendPageContent - this method gets a multi-paged PDF file and creates new PDF file from its pages by adding newly generated page content below and above the existing page content.\n\nIn the end, the demo opens the result folder with the newly created PDF files.",
    "KeyWords": "Manipulate Pages,  merge,split,prepend,append,add,page,content,generate,PDF,stream,processing"
  },
  {
    "Name": "Modify Bookmarks",
    "ExampleInfo": {
      "Name": "Modify Bookmarks",
      "DirectoryName": "ModifyBookmarks",
      "ExampleFileNames": [ "ModifyBookmarks_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "ImportExportDocument.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "ReadMe.md", "Resources\\SampleDocument.pdf", "ViewModels\\BookmarksViewModel.cs", "ViewModels\\BookmarkViewModel.cs", "ViewModels\\ViewModelBase.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ModifyBookmarks/",
    "Description": "This project demonstrates how to import, modify and export PDF bookmarks. The approach is demonstrated using the RadGridView control, which visualizes the bookmarks collection. The bookmark items can be modified and saved back to PDF using command binding and MVVM.",
    "KeyWords": "Modify Bookmarks,  bookmarks, add, edit, delete, page, content, generate, PDF, stream, processing, grid, dialog, navigation, checkbox, button, style"
  },
  {
    "Name": "Modify Form Values",
    "ExampleInfo": {
      "Name": "Modify Form Values",
      "DirectoryName": "ModifyForms",
      "ExampleFileNames": [ "ModifyFormValues.csproj", "Program.cs", "ReadMe.md", "SampleData\\InteractiveForms.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ModifyForms/",
    "Description": "This project demonstrates how to import a PDF document, modify the values of the interactive forms inside and save it back to the file system.",
    "KeyWords": "Modify Form Values,  form, field, interactive, textbox, checkbox, listbox, combtextbox, button, signature, radio button"
  },
  {
    "Name": "Modify Form Values",
    "ExampleInfo": {
      "Name": "Modify Form Values",
      "DirectoryName": "ModifyForms(.NET Standard)",
      "ExampleFileNames": [ "ModifyFormValues_NetStandard.csproj", "ModifyFormValues.csproj", "ModifyFormValues.csproj.vspscc", "ModifyFormValues_NetStandard.csproj", "SampleData\\InteractiveForms.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/ModifyForms/",
    "Description": "This project demonstrates how to import a PDF document, modify the values of the interactive forms inside and save it back to the file system.",
    "KeyWords": "Modify Form Values,  form, field, interactive, textbox, checkbox, listbox, combtextbox, button, signature, radio button"
  },
  {
    "Name": "PdfStreamWriter Performance",
    "ExampleInfo": {
      "Name": "PdfStreamWriter Performance",
      "DirectoryName": "PdfStreamWriterPerformance",
      "ExampleFileNames": [ "PdfStreamWriterPerformance.csproj", "Program.cs", "ReadMe.md", "InputFiles\\BarChart.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/PdfStreamWriterPerformance/",
    "Description": "This project demonstrates the performance of PdfStreamWriter class. The example takes some single-paged PDF document and merges its page into a new document 10000 times. The new PDF file with 10000 pages is generated in less than a second with minimal memory footprint thanks to the perfomance and memory efficiency of PdfStreamWriter class. Additionally, due to maximized reuse of PDF objects the result file size is only 10 times bigger that the original file, despite the fact that the result file has 10000 times more pages.",
    "KeyWords": "PdfStreamWriter Performance,  PdfStreamWriter,PDF,stream,processing,performance,memory,efficiency,file size,optimization"
  },
  {
    "Name": "PdfStreamWriter Performance",
    "ExampleInfo": {
      "Name": "PdfStreamWriter Performance",
      "DirectoryName": "PdfStreamWriterPerformance(.NET Standard)",
      "ExampleFileNames": [ "PdfStreamWriterPerformance_NetStandard.csproj", "PdfStreamWriterPerformance.csproj", "PdfStreamWriterPerformance_NetStandard.csproj", "InputFiles\\BarChart.pdf" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/PdfStreamWriterPerformance/",
    "Description": "This project demonstrates the performance of PdfStreamWriter class. The example takes some single-paged PDF document and merges its page into a new document 10000 times. The new PDF file with 10000 pages is generated in less than a second with minimal memory footprint thanks to the perfomance and memory efficiency of PdfStreamWriter class. Additionally, due to maximized reuse of PDF objects the result file size is only 10 times bigger that the original file, despite the fact that the result file has 10000 times more pages.",
    "KeyWords": "PdfStreamWriter Performance,  PdfStreamWriter,PDF,stream,processing,performance,memory,efficiency,file size,optimization"
  },
  {
    "Name": "Pdf Viewer Integration",
    "ExampleInfo": {
      "Name": "Pdf Viewer Integration",
      "DirectoryName": "PdfViewerIntegration(Silverlight)",
      "ExampleFileNames": [ "PdfViewerIntegration_SL.csproj", "App_SL.xaml", "App_SL.xaml.cs", "ExampleViewModel.cs", "MainPage.xaml", "MainPage.xaml.cs", "ReadMe.md" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/PdfViewerIntegration/",
    "Description": "This project demonstrates how to integrate RadPdfProcessing with RadPdfViewer",
    "KeyWords": "Pdf Viewer Integration,  show,preview,combine,combination"
  },
  {
    "Name": "Pdf Viewer Integration",
    "ExampleInfo": {
      "Name": "Pdf Viewer Integration",
      "DirectoryName": "PdfViewerIntegration(WPF)",
      "ExampleFileNames": [ "PdfViewerIntegration_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "ExampleViewModel.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "ReadMe.md" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/PdfProcessing/PdfViewerIntegration/",
    "Description": "This project demonstrates how to integrate RadPdfProcessing with RadPdfViewer",
    "KeyWords": "Pdf Viewer Integration,  show,preview,combine,combination"
  }
]
